package com.example.service;

import com.example.model.User;
import com.example.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    public long countAllUsers() {
        return userRepository.count();
    }
}

package com.example.service;

import com.example.model.Plant;
import com.example.repository.PlantRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PlantService {
    @Autowired
    private PlantRepository plantRepository;

    public long countAllPlants() {
        return plantRepository.count();
    }

    public long countPlantsByPlanted() {
        return plantRepository.countByPlantedDateIsNotNull();
    }

    public long countPlantsByHarvested() {
        return plantRepository.countByHarvestedDateIsNotNull();
    }

    public long countPlantsByDisease() {
        return plantRepository.countByDiseaseReportedIsTrue();
    }
}

package com.example.service;

import com.example.model.Event;
import com.example.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class EventService {
    @Autowired
    private EventRepository eventRepository;

    public Iterable<Event> getAllEvents() {
        return eventRepository.findAll();
    }

    public Event getEventById(String eventId) {
        return eventRepository.findById(eventId).orElseThrow(() -> new ResourceNotFoundException("Event not found"));
    }

    public Event createEvent(Event event) {
        event.setCreatedAt(new Date());
        return eventRepository.save(event);
    }

    public Event updateEvent(String eventId, Event eventDetails) {
        Event event = getEventById(eventId);
        event.setTitle(eventDetails.getTitle());
        event.setDescription(eventDetails.getDescription());
        event.setStartTime(eventDetails.getStartTime());
        event.setEndTime(eventDetails.getEndTime());
        return eventRepository.save(event);
    }

    public void deleteEvent(String eventId) {
        eventRepository.deleteById(eventId);
    }
}

