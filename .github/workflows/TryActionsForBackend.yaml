name: Try CI/CD pipeline for Backend

# Set the trigger conditions
on:
  push: 
    branches:
      - feature/forum-post_question # when Main branch have update try run the script
    paths:
      - 'Backend/**' # When Backend have update
    paths-ignore:
    # wait for the really File structure
  # pull_request:
  #   branches:
  #     - main # when Main branch has PR trigger

  # Set some manual work,like wait user check for deploy
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: true
        default: 'false' # Default not deploy, wait user check
        type: boolean
      build_docker:
        description: 'Build Docker Image'
        required: true
        default: 'false'
        type: boolean    
  

# Set the CI/CD pipeline
jobs:
  # Build Stage
  build:
    runs-on: ubuntu-latest # build environment set as Ubuntu

    steps:
      # Checkout Project Code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'        
          distribution: 'temurin'  


      # # Cache Mvn project Dependency
      # - name: Cache Mvn dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2/repository
      #     key:
      #     restore-key:

      # Build Project
      - name: Build with Mvn
        # if: ${{ github.event.inputs.build_docker == 'true' }}
        run: mvn clean install -DskipTests=true
        working-directory: Backend/KebunJio

      # Run test (Junit)
      - name: Run tests with Mvn
        run: mvn test
        working-directory: Backend/KebunJio

      # Upload Test Resport to Github
      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: junit-reports
          path: /Backend/KebunJio/target/test-reposts/*.xml

      # Generate JAR file
      # - name: Build JAR
      #   run: mvn clean package -DskipTests=true
      
      # If we use Docker
      # Build Docker Iamge
      # - name: Build Docker image
      #   run: |
      #     docker build -t [dockerhub-username]/[image-name]:${{ github.sha }} .

      # # Login Dockerhub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }} # Write in Github Secrets
      #     password: ${{ secrets.DOCKER_PASSWORDS }} # Write in Github Secrets 

      # # Push image to Dockerhub
      # - name: Push Docker image
      #   run: |
      #     docker push [dockerhub-username]/[iamge-name]:${{ github.sha }}

  # Deploy stage
  deploy:
    runs-on: ubuntu-latest

    needs: build # After build stage finished
    if: ${{ github.event.inputs.deploy == 'true' }}

    steps:
      # Checkout Project Code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Connect to Target Server
      - name: Connect Server
        run: |
          ssh -o StrictHostKeyChecking=no i ${{ secrets.SSH_KEY}} [user]@[server] 

      # Pull docker image From hub
      - name: Pull Docker image
        run: |
          docker pull [dockerhub-name]/[image-name]:${{ github.sha }}

      # Run docker image
      - name: Run Docker image
        run: |
          docker run -d --name [container-name] -p 8080:8080 [dockerhub-name]/[image-name]:${{ github.sha }}

        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
